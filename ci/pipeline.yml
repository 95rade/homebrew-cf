---
meta:
  name:     (( param "Please name your pipeline" ))
  pipeline: (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  image:
    type: docker-image
    source:
      repository: starkandwayne/concourse
  image-golang:
    type: docker-image
    source:
      repository: starkandwayne/concourse-go
      tag: 1.8

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here (read-only for repos, to avoid rate limiting)" ))

  debian:
    s3_bucket:      (( param "Please specify AWS S3 bucket for Debian packages" ))
    aws_access_key: (( param "Please specify AWS access key for debian S3 bucket" ))
    aws_secret_key: (( param "Please specify AWS secret key for debian S3 bucket" ))

  gpg:
    id:  (( param "Please provide GPG ID for signing packages" ))
    public_key:  (( param "Please provide GPG public key for signing packages" ))
    private_key: (( param "Please provide GPG private key for signing packages" ))

groups:
- name: (( grab meta.name ))
  jobs:
  - spruce-homebrew
  - spruce-debian
  - shield-homebrew
  - shield-debian
  - safe-homebrew
  - safe-debian
  - gotcha-homebrew
  - gotcha-debian
  - genesis-homebrew
  - genesis-debian
  - bosh2-homebrew
  - bosh-cli-debian
  - bosh-init-homebrew
  - credhub-cli-debian
  - certstrap-debian
  - cf-cli-debian
  - jq-debian
  - sipcalc-debian
- name: homebrew
  jobs:
  - spruce-homebrew
  - shield-homebrew
  - safe-homebrew
  - gotcha-homebrew
  - genesis-homebrew
  - bosh2-homebrew
  - bosh-init-homebrew
- name: debian
  jobs:
  - spruce-debian
  - shield-debian
  - safe-debian
  - gotcha-debian
  - genesis-debian
  - bosh-cli-debian
  - credhub-cli-debian
  - certstrap-debian
  - cf-cli-debian
  - jq-debian
  - sipcalc-debian

jobs:
  - name: safe-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: safe
        resource: safe
        trigger: true
    - task: gpg-keys
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        outputs:
        - name: certs
        run:
          path: sh
          args:
          - -exc
          - |
            echo "$GPG_ID" > certs/id
            echo "$GPG_PUBLIC_KEY" > certs/public.key
            set +x
            echo "$GPG_PRIVATE_KEY" > certs/private.key
        params:
          GPG_ID: (( grab meta.gpg.id ))
          GPG_PUBLIC_KEY: (( grab meta.gpg.public_key ))
          GPG_PRIVATE_KEY: (( grab meta.gpg.private_key ))
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: certs
        - name: safe
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: "safe-linux-amd64"
          OUT_BINARY: safe
          NAME: safe
          LICENSE: MIT
          DESCRIPTION: Vault CLI
          URL: https://github.com/starkandwayne/safe
          MAINTAINERS: https://github.com/starkandwayne/safe/graphs/contributors
          VENDOR: "Stark & Wayne LLC"
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: safe-homebrew
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: safe
        resource: safe
        trigger: true
    - task: update-homebrew
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: safe
          path: recipe
        outputs:
        - name: pushme
        run:
          path: "homebrew/ci/scripts/update-homebrew.sh"
          args:
          - safe.rb
        params:
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          BINARY: "safe-darwin-amd64"
    - put: homebrew
      params:
        repository: pushme/homebrew
        rebase: true

  - name: gotcha-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: gotcha
        resource: gotcha
        trigger: true
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: gotcha
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: "gotcha-linux-amd64"
          OUT_BINARY: gotcha
          NAME: gotcha
          LICENSE: MIT
          DESCRIPTION: Debugging MiTM HTTP Proxy
          URL: https://github.com/starkandwayne/gotcha
          MAINTAINERS: https://github.com/starkandwayne/gotcha/graphs/contributors
          VENDOR: "Stark & Wayne LLC"
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: gotcha-homebrew
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: gotcha
        resource: gotcha
        trigger: true
    - task: update-homebrew
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: gotcha
          path: recipe
        outputs:
        - name: pushme
        run:
          path: "homebrew/ci/scripts/update-homebrew.sh"
          args:
          - gotcha.rb
        params:
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          BINARY: "gotcha-darwin-amd64"
    - put: homebrew
      params:
        repository: pushme/homebrew
        rebase: true

  - name: genesis-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: genesis
        resource: genesis
        trigger: true
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: genesis
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: "genesis"
          OUT_BINARY: genesis
          NAME: genesis
          LICENSE: MIT
          DESCRIPTION: BOSH Deployment Paradigm
          URL: https://github.com/starkandwayne/genesis
          MAINTAINERS: https://github.com/starkandwayne/genesis/graphs/contributors
          VENDOR: "Stark & Wayne LLC"
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))
          FPM_FLAGS: --deb-recommends bosh-cli --deb-recommends safe --deb-recommends spruce --deb-recommends vault --deb-recommends git --deb-recommends perl

  - name: genesis-homebrew
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: genesis
        resource: genesis
        trigger: true
    - task: update-homebrew
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: genesis
          path: recipe
        outputs:
        - name: pushme
        run:
          path: "homebrew/ci/scripts/update-homebrew.sh"
          args:
          - genesis.rb
        params:
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          BINARY: "genesis"
    - put: homebrew
      params:
        repository: pushme/homebrew
        rebase: true

  - name: spruce-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: spruce
        resource: spruce
        trigger: true
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: spruce
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: "spruce-linux-amd64"
          OUT_BINARY: spruce
          NAME: spruce
          LICENSE: MIT
          DESCRIPTION: General purpose YAML & JSON merging tool
          URL: https://github.com/geofffranks/spruce
          MAINTAINERS: https://github.com/geofffranks/spruce/graphs/contributors
          VENDOR: "Geoff Franks"
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: spruce-homebrew
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: spruce
        resource: spruce
        trigger: true
    - task: update-homebrew
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: spruce
          path: recipe
        outputs:
        - name: pushme
        run:
          path: "homebrew/ci/scripts/update-homebrew.sh"
          args:
          - spruce.rb
        params:
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          BINARY: "spruce-darwin-amd64"
    - put: homebrew
      params:
        repository: pushme/homebrew
        rebase: true

  - name: shield-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: shield
        resource: shield
        trigger: true
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: shield
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: "shield-linux-amd64"
          OUT_BINARY: shield
          NAME: shield
          LICENSE: MIT
          DESCRIPTION: CLI to SHIELD Backup/Restore Director
          URL: https://github.com/starkandwayne/shield
          MAINTAINERS: https://github.com/starkandwayne/shield/graphs/contributors
          VENDOR: "Stark & Wayne"
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: shield-homebrew
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: shield
        resource: shield
        trigger: true
    - task: update-homebrew
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: shield
          path: recipe
        outputs:
        - name: pushme
        run:
          path: "homebrew/ci/scripts/update-homebrew.sh"
          args:
          - shield.rb
        params:
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          BINARY: "shield-darwin-amd64"
    - put: homebrew
      params:
        repository: pushme/homebrew
        rebase: true

  - name: bosh-cli-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: bosh-cli
        resource: bosh-cli-linux
        trigger: true
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: bosh-cli
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: "bosh-cli-*-linux-amd64"
          OUT_BINARY: bosh2
          NAME: bosh-cli
          LICENSE: Apache2
          DESCRIPTION: Interact with BOSH director
          URL: https://bosh.io/docs/cli-v2.html
          MAINTAINERS: https://github.com/cloudfoundry/bosh-cli/graphs/contributors
          VENDOR: "Cloud Foundry Foundation"
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: bosh2-homebrew
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: bosh2
        resource: bosh2
        trigger: true
    - task: update-homebrew
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: bosh2
          path: recipe
        outputs:
        - name: pushme
        run:
          path: "homebrew/ci/scripts/update-homebrew.sh"
          args:
          - bosh2.rb
        params:
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          BINARY: "bosh-cli-*-darwin-amd64"
    - put: homebrew
      params:
        repository: pushme/homebrew
        rebase: true

  - name: bosh-init-homebrew
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: bosh-init
        resource: bosh-init
        trigger: true
    - task: update-homebrew
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: bosh-init
          path: recipe
        outputs:
        - name: pushme
        run:
          path: "homebrew/ci/scripts/update-homebrew.sh"
          args:
          - bosh-init.rb
        params:
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          BINARY: "bosh-init-*-darwin-amd64"
    - put: homebrew
      params:
        repository: pushme/homebrew
        rebase: true

  - name: credhub-cli-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: credhub
        resource: credhub-cli
        trigger: true
    - task: unpack-tgz
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: credhub
          path: recipe
        outputs:
        - name: unpacked
        run:
          path: sh
          args:
          - -exc
          - |
            tar xfz recipe/${IN_TGZ} -C unpacked
            cp recipe/version unpacked/version
        params:
          IN_TGZ: "*linux*tgz"

    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: unpacked
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: credhub
          OUT_BINARY: credhub
          NAME: credhub-cli
          LICENSE: Apache2
          DESCRIPTION: CLI to interact with CredHub servers
          URL: https://github.com/cloudfoundry-incubator/credhub-cli
          MAINTAINERS: https://github.com/cloudfoundry-incubator/credhub-cli/graphs/contributors
          VENDOR: "Cloud Foundry Foundation"
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: certstrap-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: certstrap
        resource: certstrap
        trigger: true
        params: { include_source_tarball: true }
    - task: compile-certstrap
      config:
        platform: linux
        image_resource: (( grab meta.image-golang ))
        inputs:
        - name: homebrew
        - name: certstrap
          path: recipe
        outputs:
        - name: build
        run:
          path: sh
          args:
          - -exc
          - |
            mkdir -p unpack
            tar xfs recipe/*.tar.gz -C unpack
            export GOPATH=$PWD/build
            export PATH=$PATH:$GOPATH/bin
            mkdir -p $GOPATH/src/github.com/square/certstrap
            cp -r unpack/*-certstrap-*/* $GOPATH/src/github.com/square/certstrap
            go install github.com/square/certstrap

            cp $GOPATH/bin/certstrap build/certstrap
            cp recipe/version build/version
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: buildme
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: build
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: certstrap
          OUT_BINARY: certstrap
          NAME: certstrap
          LICENSE: Apache2
          DESCRIPTION: Tools to bootstrap CAs, certificate requests, and signed certificates
          URL: https://github.com/square/certstrap
          MAINTAINERS: https://github.com/square/certstrap/graphs/contributors
          VENDOR: Square
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: cf-cli-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: cf
        resource: cf-cli-linux
        trigger: true
    - task: unpack-tgz
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: cf
          path: recipe
        outputs:
        - name: unpacked
        run:
          path: sh
          args:
          - -exc
          - |
            tar xfz recipe/${IN_TGZ} -C unpacked
            cp recipe/version unpacked/version
        params:
          IN_TGZ: "*linux*tgz"
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: unpacked
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: cf
          OUT_BINARY: cf
          NAME: cf-cli
          LICENSE: Apache2
          DESCRIPTION: official command line client for Cloud Foundry
          URL: https://docs.cloudfoundry.org
          MAINTAINERS: https://github.com/cloudfoundry/cli/graphs/contributors
          VENDOR: Cloud Foundry Foundation
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: jq-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: jq
        resource: jq
        trigger: true
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: jq
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: jq-linux64
          OUT_BINARY: jq
          NAME: jq
          LICENSE: MIT
          DESCRIPTION: lightweight and flexible command-line JSON processor
          URL: https://stedolan.github.io/jq/
          MAINTAINERS: https://github.com/stedolan/jq/graphs/contributors
          VENDOR: None
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

  - name: sipcalc-debian
    public: true
    serial: true
    plan:
    - aggregate:
      - get: homebrew
        resource: homebrew
      - get: sipcalc
        resource: sipcalc
        trigger: true
    - task: create-debian
      config:
        platform: linux
        image_resource: (( grab meta.image ))
        inputs:
        - name: homebrew
        - name: sipcalc
          path: recipe
        run:
          path: "homebrew/ci/scripts/create-debian-pkg-from-binary.sh"
        params:
          DEBUG: 1
          REPO_ROOT: homebrew
          REPO_OUT: pushme
          IN_BINARY: sipcalc_linux_amd64
          OUT_BINARY: sipcalc
          NAME: sipcalc
          LICENSE: Unknown
          DESCRIPTION: Console based ip subnet calculator
          URL: http://www.routemeister.net/
          MAINTAINERS: Simon Ekstrand (simon@routemeister.net)
          VENDOR: Simon Ekstrand (simon@routemeister.net)
          RELEASE_BUCKET: (( grab meta.debian.s3_bucket ))
          AWS_ACCESS_KEY: (( grab meta.debian.aws_access_key ))
          AWS_SECRET_KEY: (( grab meta.debian.aws_secret_key ))

resources:
- name: homebrew
  type: git
  source:
    uri: (( grab meta.github.uri ))
    branch: (( grab meta.github.branch ))
    private_key : (( grab meta.github.private_key ))

- name: spruce
  type: github-release
  source:
    user: geofffranks
    repository: spruce
    access_token: (( grab meta.github.access_token ))

- name: shield
  type: github-release
  source:
    user: starkandwayne
    repository: shield
    access_token: (( grab meta.github.access_token ))

- name: safe
  type: github-release
  source:
    user: starkandwayne
    repository: safe
    access_token: (( grab meta.github.access_token ))

- name: gotcha
  type: github-release
  source:
    user: starkandwayne
    repository: gotcha
    access_token: (( grab meta.github.access_token ))

- name: genesis
  type: github-release
  source:
    user: starkandwayne
    repository: genesis
    access_token: (( grab meta.github.access_token ))

- name: bosh2
  type: github-release
  source:
    user: cloudfoundry
    repository: bosh-cli
    access_token: (( grab meta.github.access_token ))

- name: bosh-cli-linux
  type: s3
  source:
    bucket: bosh-cli-artifacts
    regexp: bosh-cli-(.*)-linux-amd64

- name: bosh-init
  type: github-release
  source:
    user: cloudfoundry
    repository: bosh-init
    access_token: (( grab meta.github.access_token ))

- name: credhub-cli
  type: github-release
  source:
    user: cloudfoundry-incubator
    repository: credhub-cli
    access_token: (( grab meta.github.access_token ))

- name: certstrap
  type: github-release
  source:
    user: square
    repository: certstrap
    access_token: (( grab meta.github.access_token ))

- name: cf-cli-linux
  type: s3
  source:
    bucket: cf-cli-releases
    region_name: us-west-1
    regexp: releases/v(.*)/cf-cli_(.*)_linux_x86-64.tgz

- name: jq
  type: github-release
  source:
    user: stedolan
    repository: jq
    access_token: (( grab meta.github.access_token ))

- name: sipcalc
  type: github-release
  source:
    user: starkandwayne
    repository: sipcalc
    access_token: (( grab meta.github.access_token ))
